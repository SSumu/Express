// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  Id       Int       @id @default(autoincrement())
  Name     String
  Username String    @unique
  Password String
  Profile  Profile? // Creating the one to one connection. ? means Profile can be null. User can has or cannot has a profile.
  Products Product[] // Many side in the One to Many (Many to One) relation is in here (to User side). Because here the Product[] of (array of products) :- Products are in here. One User has many products. One User owns many products. That is the meaning of this.
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
}

model Profile {
  Id             Int      @id @default(autoincrement()) // This is the primary key.
  Image          String // Creating the one to one connection. A Profile must have a User.
  AccountDetails User     @relation(fields: [UserId], references: [Id]) // The relation will be written in here. In the fields: [], in here inside the square brackets, there it must be written which field or fileds must be connect to the relation. references: [] means that with which field in the Profile it will be connected. That field must be inside the square brackets. This tells that User is come from AccountDetails because it is the relation. This tells that through the relation take the User with named as AccountDetails.
  UserId         Int      @unique // The connection will be based on this. This is the foriegn key. This is Int type because it is Int type also in the User. This is a important fact in the creation of the Profile. As the relation is one-one connection, UserId is unique. One User has only one Profile so in the Profile, UserId or User cannot be repeated. So there it can use the where condition and update the relevant data through any unique fields.
  createAt       DateTime @default(now())
  updateAt       DateTime @updatedAt
}

// There is a one to one connection between User and Profile. User does not necessarily has a Profile but Profile must necessarily has a User.

// This Session model is to store the Sessions in the database.
model Session {
  id        String   @id @default(uuid())
  sid       String   @unique // sid means session id
  data      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  Id              Int        @id @default(autoincrement())
  Name            String
  User            User       @relation(fields: [UserId], references: [Id]) // fields: [] means who(which fiels in here or the place where relation is defined. references: [] means the other table.). One side in the One to Many (Many to One) relation is in here (Product side). One side comes from User. Product has only one User. That is the meaning of this.
  UserId          Int // This is the connection.
  ProductCategory Category[] // This [] means that one Product may belong many Categories. Category[] is the datatype of ProductCategory.
  createAt        DateTime   @default(now())
  updateAt        DateTime   @updatedAt
}

// There is a one to many connection between User and Product.

// Many To Many relation
// One product can be own to several or many categories. One category may has several or many products. So this is a many-to-many relation.
model Category {
  Id       Int       @id @default(autoincrement())
  Name     String
  Products Product[] // This [] means one Category may has many Products. Product[] is the datatype of Products.
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
}

// There we do not use a relation part like this @relation(fields: [UserId], references: [Id]) in here. Because it is not neccessary. It may or may not be there. There are some occasions that it needs to apply.
